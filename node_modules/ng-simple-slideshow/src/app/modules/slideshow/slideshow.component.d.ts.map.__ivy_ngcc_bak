{"version":3,"file":"slideshow.component.d.ts","sources":["slideshow.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, Renderer2, DoCheck, NgZone, OnInit } from '@angular/core';\nimport { SwipeService } from './swipe.service';\nimport { ISlide } from './ISlide';\nimport { IImage } from './IImage';\nimport { DomSanitizer, TransferState, SafeStyle } from '@angular/platform-browser';\nexport declare class SlideshowComponent implements OnInit, DoCheck {\n    private _swipeService;\n    private _renderer;\n    private _transferState;\n    private _ngZone;\n    sanitizer: DomSanitizer;\n    private platform_id;\n    private document;\n    slideIndex: number;\n    slides: ISlide[];\n    private _urlCache;\n    private _autoplayIntervalId;\n    private _initial;\n    private _isHidden;\n    imageUrls: (string | IImage)[];\n    height: string;\n    minHeight: string;\n    arrowSize: string;\n    showArrows: boolean;\n    disableSwiping: boolean;\n    autoPlay: boolean;\n    autoPlayInterval: number;\n    stopAutoPlayOnSlide: boolean;\n    autoPlayWaitForLazyLoad: boolean;\n    debug: boolean;\n    backgroundSize: string;\n    backgroundPosition: string;\n    backgroundRepeat: string;\n    showDots: boolean;\n    dotColor: string;\n    showCaptions: boolean;\n    captionColor: string;\n    captionBackground: string;\n    lazyLoad: boolean;\n    hideOnNoSlides: boolean;\n    fullscreen: boolean;\n    onSlideLeft: EventEmitter<number>;\n    onSlideRight: EventEmitter<number>;\n    onSwipeLeft: EventEmitter<number>;\n    onSwipeRight: EventEmitter<number>;\n    onFullscreenExit: EventEmitter<boolean>;\n    onIndexChanged: EventEmitter<number>;\n    container: ElementRef;\n    prevArrow: ElementRef;\n    nextArrow: ElementRef;\n    readonly safeStyleDotColor: SafeStyle;\n    constructor(_swipeService: SwipeService, _renderer: Renderer2, _transferState: TransferState, _ngZone: NgZone, sanitizer: DomSanitizer, platform_id: any, document: any);\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    /**\n     * @param {number} indexDirection\n     * @param {boolean} isSwipe\n     * @description this is the function that should be called to make the slides change.\n     *              indexDirection to move back is -1, to move forward is 1, and to stay in place is 0.\n     *              0 is taken into account for failed swipes\n     */\n    onSlide(indexDirection: number, isSwipe?: boolean): void;\n    /**\n     * @param {TouchEvent} e\n     * @param {string} when\n     * @description Use the swipe service to detect swipe events from phone and tablets\n     */\n    onSwipe(e: TouchEvent, when: string): void;\n    /**\n     * @param {MouseEvent} e\n     * @description Redirect to current slide \"href\" if defined\n     */\n    onClick(e: MouseEvent): void;\n    /**\n     * @param {number} index\n     * @description set the index to the desired index - 1 and simulate a right slide\n     */\n    goToSlide(index: number): void;\n    /**\n     * @param {number} index\n     * @description set the index to the desired index - 1 and simulate a right slide\n     */\n    getSlideStyle(index: number): {\n        \"background-image\": string;\n        \"background-size\": string;\n        \"background-position\": string;\n        \"background-repeat\": string;\n    };\n    exitFullScreen(e: Event): void;\n    /**\n     * @param {number} indexDirection\n     * @param {boolean} isSwipe\n     * @description Set the new slide index, then make the transition happen.\n     */\n    private slide(indexDirection, isSwipe?);\n    /**\n     * @param {number} indexDirection\n     * @description This is just treating the url array like a circular list.\n     */\n    private setSlideIndex(indexDirection);\n    /**\n     * @param {number} oldIndex\n     * @param {boolean} isSwipe\n     * @description This function handles the variables to move the CSS classes around accordingly.\n     *              In order to correctly handle animations, the new slide as well as the slides to\n     *              the left and right are assigned classes.\n     */\n    private slideLeft(oldIndex, isSwipe?);\n    /**\n     * @param {number} oldIndex\n     * @param {boolean} isSwipe\n     * @description This function handles the variables to move the CSS classes around accordingly.\n     *              In order to correctly handle animations, the new slide as well as the slides to\n     *              the left and right are assigned classes.\n     */\n    private slideRight(oldIndex, isSwipe?);\n    /**\n     * @description Check to make sure slide images have been set or haven't changed\n     */\n    private setSlides();\n    /**\n     * @description create the slides without background urls, which will be added in\n     *              for the \"lazy load,\" then load only the first slide\n     */\n    private buildLazyLoadSlideArray();\n    /**\n     * @description create the slides with background urls all at once\n     */\n    private buildSlideArray();\n    /**\n     * @description load the first slide image if lazy loading\n     *              this takes server side and browser side into account\n     */\n    private loadFirstSlide();\n    /**\n     * @description if lazy loading in browser, start loading remaining slides\n     * @todo: figure out how to not show the spinner if images are loading fast enough\n     */\n    private loadRemainingSlides();\n    /**\n     * @param {boolean} stopAutoPlay\n     * @description Start or stop autoPlay, don't do it at all server side\n     */\n    private handleAutoPlay(stopAutoPlay?);\n    /**\n     * @description Keep the styles up to date with the input\n     */\n    private setStyles();\n    /**\n     * @description compare image array to the cache, returns false if no changes\n     */\n    private checkCache();\n    /**\n     * @param {number} i\n     * @returns {number}\n     * @description get the index for the slide to the left of the new slide\n     */\n    private getLeftSideIndex(i?);\n    /**\n     * @param {number} i\n     * @returns {number}\n     * @description get the index for the slide to the right of the new slide\n     */\n    private getRightSideIndex(i?);\n    /**\n     * @param {number} index\n     * @param {ISlide} slide\n     * @returns {any}\n     * @description a trackBy function for the ngFor loops\n     */\n    trackByFn(index: number, slide: ISlide): any;\n}\n"]}